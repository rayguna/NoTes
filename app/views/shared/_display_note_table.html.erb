<%= javascript_include_tag 'application', 'data-turbo-track': 'reload' %>

<div class="table-responsive">
  <table class="table">
    <thead class="thead-dark">
      <tr>
        <th scope="col" class="sortable" data-column="title" style="color: white;">
          Title <i class="fas fa-sort sort-icon"></i>
        </th>
        <th scope="col" class="sortable" data-column="created_at" style="color: white;">
          Created At <i class="fas fa-sort sort-icon"></i>
        </th>
        <th scope="col" class="sortable" data-column="updated_at" style="color: white;">
          Modified At <i class="fas fa-sort sort-icon"></i>
        </th>
        <th scope="col" style="color: white;">Action</th>
      </tr>
    </thead>
    <tbody id="table-body">
      <% notes.each do |note| %>
        <tr>
          <td>
            <%= link_to url_for([note, { display_as: params[:display_as] }]), class: "btn", style: "color: blue; text-decoration: none;" do %>
              <%= note.title %>
            <% end %>
          </td>
          <td><%= note.created_at.strftime("%B %d, %Y") %></td>
          <td><%= note.updated_at.strftime("%B %d, %Y") %></td>
          <td>
            <%= link_to edit_note_path(note, topic_type: params[:topic_type]), method: :get, class: "btn" do %>
              <i class="fa-solid fa-pen-to-square"></i>
            <% end %>
            <%= link_to note, method: :delete, data: { turbo_confirm: "Are you sure?" }, class: "btn" do %>
              <i class="fa-solid fa-trash"></i>
            <% end %>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const headers = document.querySelectorAll('th.sortable');
    let sortOrder = 'asc';

    headers.forEach(header => {
      header.addEventListener('click', () => {
        const column = header.getAttribute('data-column');
        const tableBody = document.getElementById('table-body');
        const rows = Array.from(tableBody.querySelectorAll('tr'));

        rows.sort((a, b) => {
          const aText = a.querySelector(`td:nth-child(${[...header.parentNode.children].indexOf(header) + 1})`).textContent.trim();
          const bText = b.querySelector(`td:nth-child(${[...header.parentNode.children].indexOf(header) + 1})`).textContent.trim();

          if (sortOrder === 'asc') {
            return aText.localeCompare(bText);
          } else {
            return bText.localeCompare(aText);
          }
        });

        sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';

        // Toggle sort icon
        header.querySelector('.sort-icon').classList.toggle('fa-sort-up', sortOrder === 'asc');
        header.querySelector('.sort-icon').classList.toggle('fa-sort-down', sortOrder === 'desc');

        // Clear the table and re-append sorted rows
        tableBody.innerHTML = '';
        rows.forEach(row => tableBody.appendChild(row));
      });
    });
  });
</script>
